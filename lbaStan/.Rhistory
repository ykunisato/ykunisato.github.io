rm(list=ls(all=TRUE))
#グラフィカルモデル用
library(DiagrammeR)
#グラフ作成用
library(ggplot2)
library(plotly)
library(bayesplot)
#Stan用
library(rstan)
library(loo)
#LBA用データの生成
library(rtdists)
grViz("
digraph dot {
graph [splines = line,compound = true, nodesep = .5, ranksep = .25,
color = black, label='Linear Ballistic Accumulator Model for single participant']
node [shape = circle,style = filled,fillcolor = white,color = black,label = 'k'] k
node [label = 'A'] A
node [label = '&tau;'] t
node [label = 'v[1]'] v1
node [label = 'v[2]'] v2
node [label = 'S'] s
node [label = 'LBA@_{t}'] lba
node [fillcolor = grey,label = 'RT@_{t}'] rt
subgraph cluster3 {
labelloc=b
label = 'Trials t = 1...T'
edge [color = black]
lba -> rt
}
edge [color = black]
A -> lba
v1 -> lba
v2 -> lba
k -> lba
t -> lba
s -> lba [taolport=s,headport=e]
}
}
",
engine = "dot")
grViz("
digraph dot {
graph [splines = line,compound = true, nodesep = .5, ranksep = .25,
color = black, label='Linear Ballistic Accumulator Model for single participant']
node [shape = circle,style = filled,fillcolor = white,color = black,label = 'k'] k
node [label = 'A'] A
node [label = '&tau;'] t
node [label = 'v[1]'] v1
node [label = 'v[2]'] v2
node [label = 'S'] s
node [label = 'LBA@_{t}'] lba
node [fillcolor = grey,label = 'RT@_{t}'] rt
subgraph cluster3 {
labelloc=b
label = 'Trials t = 1...T'
edge [color = black]
lba -> rt
}
edge [color = black]
A -> lba
v1 -> lba
v2 -> lba
k -> lba
t -> lba
s -> lba [taolport=s,headport=e]
}
}
",
engine = "dot")
grViz("
digraph dot {
graph [splines = line,compound = true, nodesep = .5, ranksep = .25,
color = black, label='Linear Ballistic Accumulator Model for single participant']
node [shape = circle,style = filled,fillcolor = white,color = black,label = 'k'] k
node [label = 'A'] A
node [label = '&tau;'] t
node [label = 'v[1]'] v1
node [label = 'v[2]'] v2
node [label = 'S'] s
node [label = 'LBA@_{t}'] lba
node [fillcolor = grey,label = 'RT@_{t}'] rt
subgraph cluster3 {
labelloc=b
label = 'Trials t = 1...T'
edge [color = black]
lba -> rt
}
edge [color = black]
A -> lba
v1 -> lba
v2 -> lba
k -> lba
t -> lba
s -> lba [taolport=s,headport=e]
}
}",engine = "dot")
grViz("
digraph dot {
graph [splines = line,compound = true, nodesep = .5, ranksep = .25,
color = black, label='Linear Ballistic Accumulator Model for single participant']
node [shape = circle,style = filled,fillcolor = white,color = black,label = 'k'] k
node [label = 'A'] A
node [label = '&tau;'] t
node [label = 'v[1]'] v1
node [label = 'v[2]'] v2
node [label = 'S'] s
node [label = 'LBA@_{t}'] lba
node [fillcolor = grey,label = 'RT@_{t}'] rt
subgraph cluster3 {
labelloc=b
label = 'Trials t = 1...T'
edge [color = black]
lba -> rt
}
edge [color = black]
A -> lba
v1 -> lba
v2 -> lba
k -> lba
t -> lba
s -> lba [taolport=s,headport=e]
}",engine = "dot")
# グラフィカルモデル用
library(DiagrammeR)
# グラフ作成用
library(ggplot2)
library(plotly)
library(bayesplot)
# Stan用
library(rstan)
library(loo)
# Linear Ballistic Accumulator model用データの生成
library(rtdists)
#データセットの作成
set.seed(1234)
data5000 <- rLBA(5000, A=0.5, b=1, t0 = 0.5, mean_v=c(2, 1.5), sd_v=c(1,1))
trialLength5000 = length(data5000$rt)
stanData2 <- list(rt=data5000$rt,res=data5000$response,LENGTH=trialLength5000,NUM_CHOICES=2)
#サンプリング
rstan_options(auto_write=TRUE)
options(mc.cores = parallel::detectCores())
hmcIter = 1000
hmcChains = 4
hmcWarmup = 300
hmcThin = 2
fit5000 <- sampling(lbaModel,
seed = 1234,
data = stanData5000,
warmup = hmcWarmup,
iter = hmcIter,
chains = hmcChains,
thin =hmcThin)
#データセットの作成
set.seed(1234)
data5000 <- rLBA(5000, A=0.5, b=1, t0 = 0.5, mean_v=c(2, 1.5), sd_v=c(1,1))
trialLength5000 = length(data5000$rt)
stanData5000 <- list(rt=data5000$rt,res=data5000$response,LENGTH=trialLength5000,NUM_CHOICES=2)
#サンプリング
rstan_options(auto_write=TRUE)
options(mc.cores = parallel::detectCores())
hmcIter = 1000
hmcChains = 4
hmcWarmup = 300
hmcThin = 2
fit5000 <- sampling(lbaModel,
seed = 1234,
data = stanData5000,
warmup = hmcWarmup,
iter = hmcIter,
chains = hmcChains,
thin =hmcThin)
extractFit5000 <- rstan::extract(fit5000)
posterior5000 <- as.matrix(fit)
posterior5000 <- as.matrix(fit5000)
kMap <- mapEstimate(extractFit5000$k)
# MAP推定値計算関数
mapEstimate <- function(z){
density(z)$x[which.max(density(z)$y)]
}
posterior5000 <- as.matrix(fit5000)
kMap <- mapEstimate(extractFit5000$k)
AMap <- mapEstimate(extractFit5000$A)
tauMap <- mapEstimate(extractFit5000$tau)
v1Map <- mapEstimate(extractFit5000$v[,1])
v2Map <- mapEstimate(extractFit5000$v[,2])
print(fit5000,par = c("k", "A", "tau", "v[1]", "v[2]","s"))
# MAP推定値
print(paste("k=",kMap,",A=",AMap,",tau=",tauMap,",v1=",v1Map,",v2=",v2Map))
mcmc_areas(posterior5000, pars = c("k", "A", "tau", "v[1]", "v[2]"), prob = 0.95)
